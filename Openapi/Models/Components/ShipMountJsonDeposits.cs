
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Openapi.Models.Components
{
    using Newtonsoft.Json;
    using System;
    using UnityEngine;
    
    public enum ShipMountJsonDeposits
    {
        [JsonProperty("QUARTZ_SAND")]
        QuartzSand,
        [JsonProperty("SILICON_CRYSTALS")]
        SiliconCrystals,
        [JsonProperty("PRECIOUS_STONES")]
        PreciousStones,
        [JsonProperty("ICE_WATER")]
        IceWater,
        [JsonProperty("AMMONIA_ICE")]
        AmmoniaIce,
        [JsonProperty("IRON_ORE")]
        IronOre,
        [JsonProperty("COPPER_ORE")]
        CopperOre,
        [JsonProperty("SILVER_ORE")]
        SilverOre,
        [JsonProperty("ALUMINUM_ORE")]
        AluminumOre,
        [JsonProperty("GOLD_ORE")]
        GoldOre,
        [JsonProperty("PLATINUM_ORE")]
        PlatinumOre,
        [JsonProperty("DIAMONDS")]
        Diamonds,
        [JsonProperty("URANITE_ORE")]
        UraniteOre,
        [JsonProperty("MERITIUM_ORE")]
        MeritiumOre,
    }

    public static class ShipMountJsonDepositsExtension
    {
        public static string Value(this ShipMountJsonDeposits value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static ShipMountJsonDeposits ToEnum(this string value)
        {
            foreach(var field in typeof(ShipMountJsonDeposits).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    return (ShipMountJsonDeposits)field.GetValue(null);
                }
            }

            throw new Exception($"Unknown value {value} for enum ShipMountJsonDeposits");
        }
    }

}