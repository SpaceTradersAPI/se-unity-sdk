
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Openapi.Models.Components
{
    using Newtonsoft.Json;
    using System;
    using UnityEngine;
    
    /// <summary>
    /// Symbo of this mount.
    /// </summary>
    public enum ShipMountJsonSymbol
    {
        [JsonProperty("MOUNT_GAS_SIPHON_I")]
        MountGasSiphonI,
        [JsonProperty("MOUNT_GAS_SIPHON_II")]
        MountGasSiphonIi,
        [JsonProperty("MOUNT_GAS_SIPHON_III")]
        MountGasSiphonIii,
        [JsonProperty("MOUNT_SURVEYOR_I")]
        MountSurveyorI,
        [JsonProperty("MOUNT_SURVEYOR_II")]
        MountSurveyorIi,
        [JsonProperty("MOUNT_SURVEYOR_III")]
        MountSurveyorIii,
        [JsonProperty("MOUNT_SENSOR_ARRAY_I")]
        MountSensorArrayI,
        [JsonProperty("MOUNT_SENSOR_ARRAY_II")]
        MountSensorArrayIi,
        [JsonProperty("MOUNT_SENSOR_ARRAY_III")]
        MountSensorArrayIii,
        [JsonProperty("MOUNT_MINING_LASER_I")]
        MountMiningLaserI,
        [JsonProperty("MOUNT_MINING_LASER_II")]
        MountMiningLaserIi,
        [JsonProperty("MOUNT_MINING_LASER_III")]
        MountMiningLaserIii,
        [JsonProperty("MOUNT_LASER_CANNON_I")]
        MountLaserCannonI,
        [JsonProperty("MOUNT_MISSILE_LAUNCHER_I")]
        MountMissileLauncherI,
        [JsonProperty("MOUNT_TURRET_I")]
        MountTurretI,
    }

    public static class ShipMountJsonSymbolExtension
    {
        public static string Value(this ShipMountJsonSymbol value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static ShipMountJsonSymbol ToEnum(this string value)
        {
            foreach(var field in typeof(ShipMountJsonSymbol).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    return (ShipMountJsonSymbol)field.GetValue(null);
                }
            }

            throw new Exception($"Unknown value {value} for enum ShipMountJsonSymbol");
        }
    }

}