
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Openapi.Models.Components
{
    using Newtonsoft.Json;
    using System;
    using UnityEngine;
    
    /// <summary>
    /// Symbol of the frame.
    /// </summary>
    public enum Symbol
    {
        [JsonProperty("FRAME_PROBE")]
        FrameProbe,
        [JsonProperty("FRAME_DRONE")]
        FrameDrone,
        [JsonProperty("FRAME_INTERCEPTOR")]
        FrameInterceptor,
        [JsonProperty("FRAME_RACER")]
        FrameRacer,
        [JsonProperty("FRAME_FIGHTER")]
        FrameFighter,
        [JsonProperty("FRAME_FRIGATE")]
        FrameFrigate,
        [JsonProperty("FRAME_SHUTTLE")]
        FrameShuttle,
        [JsonProperty("FRAME_EXPLORER")]
        FrameExplorer,
        [JsonProperty("FRAME_MINER")]
        FrameMiner,
        [JsonProperty("FRAME_LIGHT_FREIGHTER")]
        FrameLightFreighter,
        [JsonProperty("FRAME_HEAVY_FREIGHTER")]
        FrameHeavyFreighter,
        [JsonProperty("FRAME_TRANSPORT")]
        FrameTransport,
        [JsonProperty("FRAME_DESTROYER")]
        FrameDestroyer,
        [JsonProperty("FRAME_CRUISER")]
        FrameCruiser,
        [JsonProperty("FRAME_CARRIER")]
        FrameCarrier,
    }

    public static class SymbolExtension
    {
        public static string Value(this Symbol value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static Symbol ToEnum(this string value)
        {
            foreach(var field in typeof(Symbol).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    return (Symbol)field.GetValue(null);
                }
            }

            throw new Exception($"Unknown value {value} for enum Symbol");
        }
    }

}