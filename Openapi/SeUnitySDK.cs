
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Openapi
{
    using Newtonsoft.Json;
    using Openapi.Models.Components;
    using Openapi.Models.Requests;
    using Openapi.Utils;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using System;
    using UnityEngine.Networking;

    /// <summary>
    /// SpaceTraders API: SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.<br/>
    /// 
    /// <remarks>
    /// <br/>
    /// The API is documented using <a href="https://github.com/SpaceTradersAPI/api-docs">OpenAPI</a>. You can send your first request right here in your browser to check the status of the game server.<br/>
    /// <br/>
    /// ```json http<br/>
    /// {<br/>
    ///   &quot;method&quot;: &quot;GET&quot;,<br/>
    ///   &quot;url&quot;: &quot;https://api.spacetraders.io/v2&quot;,<br/>
    /// }<br/>
    /// ```<br/>
    /// <br/>
    /// Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.<br/>
    /// <br/>
    /// We have a <a href="https://discord.com/invite/jh6zurdWk5">Discord channel</a> where you can share your projects, ask questions, and get help from other players.<br/>
    /// <br/>
    /// <br/>
    /// 
    /// </remarks>
    /// </summary>
    public interface ISeUnitySDK
    {

        /// <summary>
        /// Systems
        /// </summary>
        public ISystems Systems { get; }

        /// <summary>
        /// Factions
        /// </summary>
        public IFactions Factions { get; }

        /// <summary>
        /// Agents
        /// </summary>
        public IAgents Agents { get; }

        /// <summary>
        /// Contracts
        /// </summary>
        public IContracts Contracts { get; }

        /// <summary>
        /// Fleet
        /// </summary>
        public IFleet Fleet { get; }

        /// <summary>
        /// Get Status
        /// 
        /// <remarks>
        /// Return the status of the game server.<br/>
        /// This also includes a few global elements, such as announcements, server reset dates and leaderboards.
        /// </remarks>
        /// </summary>
        Task<GetStatusResponse> GetStatusAsync();

        /// <summary>
        /// Register New Agent
        /// 
        /// <remarks>
        /// Creates a new agent and ties it to an account. <br/>
        /// The agent symbol must consist of a 3-14 character string, and will be used to represent your agent. This symbol will prefix the symbol of every ship you own. Agent symbols will be cast to all uppercase characters.<br/>
        /// <br/>
        /// This new agent will be tied to a starting faction of your choice, which determines your starting location, and will be granted an authorization token, a contract with their starting faction, a command ship that can fly across space with advanced capabilities, a small probe ship that can be used for reconnaissance, and 150,000 credits.<br/>
        /// <br/>
        /// &gt; #### Keep your token safe and secure<br/>
        /// &gt;<br/>
        /// &gt; Save your token during the alpha phase. There is no way to regenerate this token without starting a new agent. In the future you will be able to generate and manage your tokens from the SpaceTraders website.<br/>
        /// <br/>
        /// If you are new to SpaceTraders, It is recommended to register with the COSMIC faction, a faction that is well connected to the rest of the universe. After registering, you should try our interactive <a href="https://docs.spacetraders.io/quickstart/new-game">quickstart guide</a> which will walk you through basic API requests in just a few minutes.
        /// </remarks>
        /// </summary>
        Task<RegisterResponse> RegisterAsync(RegisterRequestBody? request = null);
    }
    

    public class SDKConfig
    {
        /// <summary>
        /// List of server URLs available to the SDK.
        /// </summary>
        public static readonly string[] ServerList = {
            "https://api.spacetraders.io/v2",
        };

        public string serverUrl = "";
        public int serverIndex = 0;

        public string GetTemplatedServerDetails()
        {
            if (!String.IsNullOrEmpty(this.serverUrl))
            {
                return Utilities.TemplateUrl(Utilities.RemoveSuffix(this.serverUrl, "/"), new Dictionary<string, string>());
            }
            return Utilities.TemplateUrl(SDKConfig.ServerList[this.serverIndex], new Dictionary<string, string>());
        }
    }

    /// <summary>
    /// SpaceTraders API: SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.<br/>
    /// 
    /// <remarks>
    /// <br/>
    /// The API is documented using <a href="https://github.com/SpaceTradersAPI/api-docs">OpenAPI</a>. You can send your first request right here in your browser to check the status of the game server.<br/>
    /// <br/>
    /// ```json http<br/>
    /// {<br/>
    ///   &quot;method&quot;: &quot;GET&quot;,<br/>
    ///   &quot;url&quot;: &quot;https://api.spacetraders.io/v2&quot;,<br/>
    /// }<br/>
    /// ```<br/>
    /// <br/>
    /// Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.<br/>
    /// <br/>
    /// We have a <a href="https://discord.com/invite/jh6zurdWk5">Discord channel</a> where you can share your projects, ask questions, and get help from other players.<br/>
    /// <br/>
    /// <br/>
    /// 
    /// </remarks>
    /// </summary>
    public class SeUnitySDK: ISeUnitySDK
    {
        public SDKConfig SDKConfiguration { get; private set; }

        private const string _target = "unity";
        private const string _sdkVersion = "0.0.1";
        private const string _sdkGenVersion = "2.281.2";
        private const string _openapiDocVersion = "2.0.0";
        private const string _userAgent = "speakeasy-sdk/unity 0.0.1 2.281.2 2.0.0 openapi";
        private string _serverUrl = "";
        private int _serverIndex = 0;
        private ISpeakeasyHttpClient _defaultClient;
        private Func<Security>? _securitySource;
        public ISystems Systems { get; private set; }
        public IFactions Factions { get; private set; }
        public IAgents Agents { get; private set; }
        public IContracts Contracts { get; private set; }
        public IFleet Fleet { get; private set; }

        public SeUnitySDK(string? agentToken = null, Func<string>? agentTokenSource = null, int? serverIndex = null, string? serverUrl = null, Dictionary<string, string>? urlParams = null, ISpeakeasyHttpClient? client = null)
        {
            if (serverIndex != null)
            {
                if (serverIndex.Value < 0 || serverIndex.Value >= SDKConfig.ServerList.Length)
                {
                    throw new Exception($"Invalid server index {serverIndex.Value}");
                }
                _serverIndex = serverIndex.Value;
            }

            if (serverUrl != null)
            {
                if (urlParams != null)
                {
                    serverUrl = Utilities.TemplateUrl(serverUrl, urlParams);
                }
                _serverUrl = serverUrl;
            }

            _defaultClient = new SpeakeasyHttpClient(client);

            if(agentTokenSource != null)
            {
                _securitySource = () => new Security() { AgentToken = agentTokenSource() };
            }
            else if(agentToken != null)
            {
                _securitySource = () => new Security() { AgentToken = agentToken };
            }
            else
            {
                throw new Exception("agentToken and agentTokenSource cannot both be null");
            }

            SDKConfiguration = new SDKConfig()
            {
                serverIndex = _serverIndex,
                serverUrl = _serverUrl
            };

            Systems = new Systems(_defaultClient, _securitySource, _serverUrl, SDKConfiguration);
            Factions = new Factions(_defaultClient, _securitySource, _serverUrl, SDKConfiguration);
            Agents = new Agents(_defaultClient, _securitySource, _serverUrl, SDKConfiguration);
            Contracts = new Contracts(_defaultClient, _securitySource, _serverUrl, SDKConfiguration);
            Fleet = new Fleet(_defaultClient, _securitySource, _serverUrl, SDKConfiguration);
        }

        
        public async Task<GetStatusResponse> GetStatusAsync()
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerDetails();
            var urlString = baseUrl + "/";

            var httpRequest = new UnityWebRequest(urlString, UnityWebRequest.kHttpVerbGET);
            DownloadHandlerStream downloadHandler = new DownloadHandlerStream();
            httpRequest.downloadHandler = downloadHandler;
            httpRequest.SetRequestHeader("user-agent", _userAgent);

            var client = _defaultClient;

            var httpResponse = await client.SendAsync(httpRequest);
            switch (httpResponse.result)
            {
                case UnityWebRequest.Result.ConnectionError:
                case UnityWebRequest.Result.DataProcessingError:
                case UnityWebRequest.Result.ProtocolError:
                    var errorMsg = httpResponse.error;
                    httpRequest.Dispose();
                    throw new Exception(errorMsg);
            }

            var contentType = httpResponse.GetResponseHeader("Content-Type");

            var response = new GetStatusResponse
            {
                StatusCode = (int)httpResponse.responseCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };

            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Object = JsonConvert.DeserializeObject<GetStatusResponseBody>(httpResponse.downloadHandler.text, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new DateOnlyConverter(), new EnumSerializer() }});
                }

                return response;
            }
            return response;
        }


        
        public async Task<RegisterResponse> RegisterAsync(RegisterRequestBody? request = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerDetails();
            var urlString = baseUrl + "/register";

            var httpRequest = new UnityWebRequest(urlString, UnityWebRequest.kHttpVerbPOST);
            DownloadHandlerStream downloadHandler = new DownloadHandlerStream();
            httpRequest.downloadHandler = downloadHandler;
            httpRequest.SetRequestHeader("user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json", false, true);
            if (serializedBody != null)
            {
                httpRequest.uploadHandler = new UploadHandlerRaw(serializedBody.Body);
                httpRequest.SetRequestHeader("Content-Type", serializedBody.ContentType);
            }

            var client = _defaultClient;

            var httpResponse = await client.SendAsync(httpRequest);
            switch (httpResponse.result)
            {
                case UnityWebRequest.Result.ConnectionError:
                case UnityWebRequest.Result.DataProcessingError:
                case UnityWebRequest.Result.ProtocolError:
                    var errorMsg = httpResponse.error;
                    httpRequest.Dispose();
                    throw new Exception(errorMsg);
            }

            var contentType = httpResponse.GetResponseHeader("Content-Type");

            var response = new RegisterResponse
            {
                StatusCode = (int)httpResponse.responseCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };

            if((response.StatusCode == 201))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Object = JsonConvert.DeserializeObject<RegisterResponseBody>(httpResponse.downloadHandler.text, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Include, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new DateOnlyConverter(), new EnumSerializer() }});
                }

                return response;
            }
            return response;
        }

    }
}
